'''
    def ResampleParticlesWithVariation(self,prob):
        # print("before resampling",self.particleArray)
        new_particles = []
        c = []
        c.append(self.weight[0])
        # print(self.weight)
        for i in range(1,self.N):
            c.append(c[i-1]+self.weight[i])

        u = np.random.uniform(0,1/self.N)
        i = 0
        j = 0
        end = False
        while j<self.N:
            while u>c[i]:
                i+=1
                if i>=self.N:
                    i-=1
                    j=self.N
                    break
            if random.uniform(0,1) < prob:
                new_particles.append(self.GridPosResActPos())
            else:
                new_particles.append(self.SampleParticleAroundPose(copy.copy(self.getParticle(i)),self.res_lin_sigma,self.res_ang_sigma))
            u+=1/self.N
            j+=1
        for _ in range(self.N-len(new_particles)):
            new_particles.append(self.SampleParticleAroundPose(copy.copy(self.getParticle(self.N-1)),self.res_lin_sigma,self.res_ang_sigma))

        for i in range(self.N):
            x = copy.copy(new_particles[i][0])
            y = copy.copy(new_particles[i][1])
            x,y = self.util.ActPos2GridPos(x,y)
            if self.util.OccupancyCheckGridCoord(x,y)==True:
                new_particles[i] = self.GridPosResActPos()

        return new_particles
'''
'''
    def ResampleParticles(self):
        # print("before resampling",self.particleArray)
        new_particles = []
        c = []
        c.append(self.weight[0])
        # print(self.weight)
        for i in range(1,self.N):
            c.append(c[i-1]+self.weight[i])

        u = np.random.uniform(0,1/self.N)
        i = 0
        j = 0
        end = False
        while j<self.N:
            while u>c[i]:
                i+=1
                if i>=self.N:
                    i-=1
                    j=self.N
                    break
            new_particles.append(copy.copy(self.getParticle(i)))
            u+=1/self.N
            j+=1
        for _ in range(self.N-len(new_particles)):
            new_particles.append(copy.copy(self.getParticle(self.N-1)))

        return new_particles
'''
'''
    def UpdateWeight(self):
        for i in range(self.N):
            self.weight[i] = np.sqrt(self.sensor_model.CorrectionOneParticle(copy.copy(self.getParticle(i))))
        sum_of_weight = sum(self.weight)
        for i in range(self.N):
            self.weight[i] = self.weight[i]/sum_of_weight
        return sum_of_weight/self.N
'''
